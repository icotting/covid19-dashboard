{"version":3,"sources":["helpers/DataCharts.js","helpers/Util.js","helpers/CaseHeatMap.js","helpers/ParseData.js","Home.js","Root.js","App.js","index.js"],"names":["timeLineChart","formatNumber","number","toString","replace","dashboardColors","activeCases","deaths","recoveries","am4core","am4themes_animated","summaryChart","mortalityRateChart","renderTimeline","home","caseData","days","length","am4charts","xAxes","push","renderer","minGridDistance","yAxes","legend","addSeries","field","name","color","snap","series","dataFields","valueY","dateX","strokeWidth","minBulletDistance","tooltipText","tooltip","getFillFromObject","background","fill","autoTextColor","label","getStrokeFromObject","stroke","pointerOrientation","cornerRadius","fillOpacity","padding","stacked","day","scrollBar","scrollbarX","events","on","ev","onDayChange","Math","round","target","end","cursor","data","statusChart","statusLabel","chart","polygonSeries","legendMin","legendMax","markerSeries","currentCountry","computeState","case_map","case_summary","mortality_rates","country_list","process","entries","last","dateIndex","current","cases","total","mortality","global_totals","process_geo","geo","forEach","entry","i","date","Date","toDateString","active","c_index","markers","Object","geoData","country","id","value","filter_match","countryFilter","children","values","child","main_body","r","latitude","lat","longitude","lon","iso_names","category","value1","value2","value3","mt","title","x","y","rate","case_totals","region","dea","console","log","sort","slice","map_opts","state","mapOptions","displayMode","iso_name","unshift","caseMapData","maxValue","zoomCountry","am4maps","geodata","am4geodata_worldLow","projection","Mercator","heatRules","property","mapPolygons","template","min","max","brighten","exclude","useGeodata","createChild","align","valign","width","valueAxis","axisRanges","create","labels","adapter","add","labelText","polygonTemplate","nonScalingStroke","zoomToMapObject","getPolygonById","goHome","marginRight","minValue","text","removeIndex","indexOf","madeFromGeoData","imageTemplate","mapImages","nonScaling","propertyFields","circle","dataField","renderMap","status","startAngle","endAngle","innerRadius","seriesContainer","horizontalCenter","verticalCenter","textAlign","fontSize","pieSeries","disabled","ticks","colorSet","list","map","c","alpha","colors","record","sector","size","renderStatus","summary","hiddenState","properties","opacity","titles","marginBottom","fontWeight","step","categoryAxis","grid","location","strictMinMax","calculateTotals","minWidth","series1","columns","categoryX","valueYShow","dataItems","locations","bullet1","bullets","interactionsEnabled","locationY","renderSummary","mortalityRates","useDefaultMarker","position","valueAxisX","axisFills","valueAxisY","xval","yval","val","valueX","strokeOpacity","sequencedInterpolation","hiddenInLegend","legendSettings","valueText","bullet","outline","plotContainer","hide","blurFilter","filters","event","radius","pixelRadius","pixelX","pixelY","show","hoverState","states","tooltipY","behavior","scrollbarY","dx","dy","dvalue","ix","iy","ivalue","renderMortalityRates","globalTotals","caseMap","caseSummary","countryList","Home","props","globalTimeSeries","colorAxis","index","fetch","credentials","then","res","json","countries","setState","e","this","countrySelect","Navbar","variant","bg","Brand","href","Collapse","Nav","className","Form","inline","Control","as","onChange","onCountrySelect","bind","ref","el","option","key","Container","fluid","Row","Col","sm","style","height","Component","Root","exact","path","component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.85f048ac.chunk.js","sourcesContent":["import * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport {formatNumber, dashboardColors} from \"./Util\";\n\nam4core.useTheme(am4themes_animated);\n\n\nvar timeLineChart;\nexport let renderTimeline = (home, caseData) => {\n        \n    let days = caseData.length;\n    \n    if (!timeLineChart) {\n        timeLineChart = am4core.create(\"timelinediv\", am4charts.XYChart);\n    \n        var dateAxis = timeLineChart.xAxes.push(new am4charts.DateAxis());\n        dateAxis.renderer.minGridDistance = 50;\n        \n        timeLineChart.yAxes.push(new am4charts.ValueAxis());\n        timeLineChart.legend = new am4charts.Legend();\n\n        let addSeries = (field, name, color, snap) => {\n            // Create series\n            var series = timeLineChart.series.push(new am4charts.LineSeries());\n            series.dataFields.valueY = field;\n            series.dataFields.dateX = \"date\";\n            series.strokeWidth = 2;\n            series.minBulletDistance = 10;\n            series.name = name;\n            series.tooltipText = \"{name}: [bold]{valueY}[/]\";\n            \n            series.tooltip.getFillFromObject = false;\n            series.tooltip.background.fill = am4core.color(\"#ccc\");\n            series.tooltip.autoTextColor = false;\n            series.tooltip.label.fill = am4core.color(\"black\");\n            series.tooltip.getStrokeFromObject = false;\n            series.tooltip.background.strokeWidth = 3;\n            series.stroke = color;\n\n            series.tooltip.pointerOrientation = \"vertical\";\n            series.tooltip.background.cornerRadius = 20;\n            series.tooltip.background.fillOpacity = 0.5;\n            series.tooltip.label.padding(12,12,12,12);\n            series.fillOpacity = 0.3;\n            series.fill = color;\n            series.stacked = false;\n            \n            if (snap) {\n                // Add scrollbar\n                let scrollBar = timeLineChart.scrollbarX = new am4charts.XYChartScrollbar();\n    \n                var day;\n                scrollBar.events.on(\"up\", function(ev) {\n                    home.onDayChange({day: day});\n                });\n    \n                scrollBar.events.on(\"rangechanged\", function(ev) {\n                    day = Math.round(days * ev.target.end);\n                });\n    \n                timeLineChart.scrollbarX.series.push(series);\n            }\n            return series; \n        };\n\n        addSeries(\"active\", \"Active Cases\", dashboardColors.activeCases, true);\n        addSeries(\"deaths\", \"Deaths\", dashboardColors.deaths);\n        addSeries(\"recoveries\", \"Recoveries\", dashboardColors.recoveries);\n    \n        timeLineChart.cursor = new am4charts.XYCursor();\n    }\n\n    timeLineChart.data = caseData;\n};\n\nvar statusChart = null;\nvar statusLabel = null;\nexport let renderStatus = (status) => {\n\n    if (!statusChart) {\n        // Create chart instance\n        statusChart = am4core.create(\"statusdiv\", am4charts.PieChart);\n        statusChart.startAngle = 160;\n        statusChart.endAngle = 380;\n\n                // Add label\n        statusChart.innerRadius = 150;\n        statusLabel = statusChart.seriesContainer.createChild(am4core.Label);\n\n        statusLabel.horizontalCenter = \"middle\";\n        statusLabel.verticalCenter = \"middle\";\n        statusLabel.textAlign = \"middle\";\n        statusLabel.fontSize = 35;\n        statusLabel.fill = \"#999999\";\n\n        // Add and configure Series\n        var pieSeries = statusChart.series.push(new am4charts.PieSeries());\n        pieSeries.dataFields.value = \"size\";\n        pieSeries.dataFields.category = \"sector\";\n        pieSeries.labels.template.disabled = true;\n        pieSeries.ticks.template.disabled = true;\n\n        var colorSet = new am4core.ColorSet();\n            colorSet.list = [dashboardColors.deaths, dashboardColors.recoveries, dashboardColors.activeCases].map(function(color) {\n            let c = new am4core.color(color);\n            c.alpha = 0.7;\n            return c;\n        });\n        pieSeries.colors = colorSet;\n    }\n\n    let record = status[status.length-1];\n    statusLabel.text = \"Total Cases \\n\"+formatNumber(record.cases);\n\n    // Add data\n    statusChart.data = [\n        {sector: \"Deaths\", size: record.deaths }, \n        {sector: \"Recoveries\", size: record.recoveries },\n        {sector: \"Active Cases\", size: record.cases }\n    ];\n};\n\nvar summaryChart;\nexport let renderSummary = (summary) => {\n\n    if (!summaryChart) {\n        summaryChart = am4core.create(\"summarydiv\", am4charts.XYChart);\n        summaryChart.hiddenState.properties.opacity = 0; // this creates initial fade-in\n    \n        let title = summaryChart.titles.create();\n        title.text = \"Top 20 Regions by Active Cases\";\n        title.fontSize = 16;\n        title.marginBottom = 4;\n        title.fontWeight = \"700\";\n        title.align = \"left\";\n\n        summaryChart.colors.step = 2;\n        summaryChart.padding(30, 30, 10, 30);\n        summaryChart.legend = new am4charts.Legend();\n    \n        var categoryAxis = summaryChart.xAxes.push(new am4charts.CategoryAxis());\n        categoryAxis.dataFields.category = \"category\";\n        categoryAxis.renderer.grid.template.location = 0;\n    \n        var valueAxis = summaryChart.yAxes.push(new am4charts.ValueAxis());\n        valueAxis.strictMinMax = false;\n        valueAxis.calculateTotals = true;\n        valueAxis.renderer.minWidth = 50;\n    \n        let addSeries = (name, color, value) => { \n            var series1 = summaryChart.series.push(new am4charts.ColumnSeries());\n            series1.columns.template.width = am4core.percent(80);\n            series1.columns.template.tooltipText =\n            \"{name}: {valueY.formatNumber('#,###')}\";\n            series1.name = name;\n            series1.dataFields.categoryX = \"category\";\n            series1.dataFields.valueY = value;\n            series1.dataFields.valueYShow = \"total\";\n            series1.dataItems.template.locations.categoryX = 0.5;\n            series1.stacked = true;\n            series1.tooltip.pointerOrientation = \"vertical\";\n            series1.fill = am4core.color(color);\n            series1.fillOpacity = 0.7;\n            series1.strokeWidth = 0;\n    \n            var bullet1 = series1.bullets.push(new am4charts.LabelBullet());\n            bullet1.interactionsEnabled = false;\n            bullet1.label.text = \"{valueY.formatNumber('#,###')}\";\n            bullet1.label.fill = am4core.color(\"#ffffff\");\n            bullet1.locationY = 0.5;\n        }\n\n        addSeries(\"Active Cases\", dashboardColors.activeCases, \"value1\");\n        addSeries(\"Deaths\", dashboardColors.deaths, \"value2\");\n        addSeries(\"Recoveries\", dashboardColors.recoveries, \"value3\");\n\n        summaryChart.scrollbarX = new am4core.Scrollbar();\n    }\n\n    summaryChart.data = summary;\n};\n\nvar mortalityRateChart;\nexport let renderMortalityRates = (mortalityRates) => {\n\n    if (!mortalityRateChart) {\n        mortalityRateChart = am4core.create(\"mortalitydiv\", am4charts.XYChart);\n\n        let title = mortalityRateChart.titles.create();\n        title.text = \"Observed Mortality Against Recovery Rates\";\n        title.fontSize = 16;\n        title.marginBottom = 4;\n        title.fontWeight = \"700\";\n        title.align = \"left\";\n\n        var legend = new am4charts.Legend();\n        legend.useDefaultMarker = true;\n        legend.position = \"bottom\";\n        mortalityRateChart.legend = legend;\n\n        var valueAxisX = mortalityRateChart.xAxes.push(new am4charts.ValueAxis());\n        valueAxisX.renderer.ticks.template.disabled = true;\n        valueAxisX.renderer.axisFills.template.disabled = true;\n    \n        var valueAxisY = mortalityRateChart.yAxes.push(new am4charts.ValueAxis());\n        valueAxisY.renderer.ticks.template.disabled = true;\n        valueAxisY.renderer.axisFills.template.disabled = true;\n    \n        let addSeries = (name, xval, yval, val, color) => {\n            var series = mortalityRateChart.series.push(new am4charts.LineSeries());\n            series.dataFields.valueX = xval;\n            series.dataFields.valueY = yval;\n            series.dataFields.value = val;\n            series.strokeOpacity = 0;\n            series.sequencedInterpolation = true;\n            series.tooltip.pointerOrientation = \"vertical\";\n            series.hiddenInLegend = false;\n            series.legendSettings.valueText = name;\n            series.fill = am4core.color(color);\n\n            var bullet = series.bullets.push(new am4core.Circle());\n            bullet.fill = am4core.color(color);\n            bullet.strokeOpacity = 0;\n            bullet.strokeWidth = 2;\n            bullet.fillOpacity = 0.5;\n            bullet.stroke = am4core.color(\"#ffffff\");\n            bullet.hiddenState.properties.opacity = 0;\n            bullet.tooltipText = \"[bold]{title}:[/]\\nTotal Cases: {value.value.formatNumber('#,###')}\\nMortality Rate: {valueX.value.formatNumber('#.00')}%\\nRecovery Rate: {valueY.value.formatNumber('#.00')}%\";\n        \n            var outline = mortalityRateChart.plotContainer.createChild(am4core.Circle);\n            outline.fillOpacity = 0;\n            outline.strokeOpacity = 0.8;\n            outline.stroke = am4core.color(\"#ff0000\");\n            outline.strokeWidth = 0;\n            outline.hide(0);\n        \n            var blurFilter = new am4core.BlurFilter();\n            outline.filters.push(blurFilter);\n        \n            bullet.events.on(\"over\", function(event) {\n                var target = event.target;\n                outline.radius = target.pixelRadius + 2;\n                outline.x = target.pixelX;\n                outline.y = target.pixelY;\n                outline.show();\n            });\n        \n            bullet.events.on(\"out\", function(event) {\n                outline.hide();\n            });\n        \n            var hoverState = bullet.states.create(\"hover\");\n            hoverState.properties.fillOpacity = 1;\n            hoverState.properties.strokeOpacity = 1;\n        \n            series.heatRules.push({ target: bullet, min: 2, max: 60, property: \"radius\" });\n        \n            bullet.adapter.add(\"tooltipY\", function (tooltipY, target) {\n                return -target.radius;\n            });\n\n        };\n        \n        mortalityRateChart.cursor = new am4charts.XYCursor();\n        mortalityRateChart.cursor.behavior = \"zoomXY\";\n\n    \n        mortalityRateChart.scrollbarX = new am4core.Scrollbar();\n        mortalityRateChart.scrollbarY = new am4core.Scrollbar();\n\n        addSeries(\"Declining\", \"dx\", \"dy\", \"dvalue\", dashboardColors.recoveries);\n        addSeries(\"Increasing\", \"ix\", \"iy\", \"ivalue\", dashboardColors.deaths);\n    }\n\n    mortalityRateChart.data = mortalityRates.map((x) => {\n        if (x.rate === \"Declining\") {\n            return {\n                title: x.title,\n                dx: x.x,\n                dy: x.y,\n                dvalue: x.value\n            };\n        } else {\n            return {\n                title: x.title,\n                ix: x.x,\n                iy: x.y,\n                ivalue: x.value\n            };\n        }\n    });\n};","export let formatNumber = (number) => {\n   return  number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n};\n\nexport let dashboardColors = {\n   activeCases: '#2E7AD0', \n   deaths: \"#D02E2E\", \n   recoveries: \"#50D02E\"\n};","import * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\nimport am4geodata_worldLow from \"@amcharts/amcharts4-geodata/worldLow\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport {formatNumber, dashboardColors} from \"./Util\";\n\nam4core.useTheme(am4themes_animated);\n\nvar chart = null; \nvar polygonSeries = null;\nvar legend = null;\nvar legendMin = null;\nvar legendMax = null;\nvar markerSeries = null;\nvar currentCountry = null;\n\nexport let renderMap = (home, caseMapData, maxValue, markers, zoomCountry) => {\n    if (!chart) {\n        chart = am4core.create(\"mapdiv\", am4maps.MapChart);\n        chart.geodata = am4geodata_worldLow;\n        chart.projection = new am4maps.projections.Mercator();\n\n        polygonSeries = chart.series.push(new am4maps.MapPolygonSeries());\n\n        polygonSeries.heatRules.push({\n            property: \"fill\",\n            target: polygonSeries.mapPolygons.template,\n            min: am4core.color(\"white\"),\n            max: am4core.color(dashboardColors.activeCases).brighten(1)\n        });\n    \n        polygonSeries.exclude = [\"AQ\"];\n    \n        polygonSeries.useGeodata = true;\n        polygonSeries.tooltip.background.fill = am4core.color(\"#ccc\");\n\n        polygonSeries.mapPolygons.template.stroke = am4core.color(\"#cccccc\");\n        polygonSeries.mapPolygons.template.fill = am4core.color(\"#F4F4F4\");\n\n        legend = chart.createChild(am4maps.HeatLegend);\n        legend.series = polygonSeries;\n        legend.align = \"right\";\n        legend.valign = \"bottom\";\n        legend.width = am4core.percent(20);\n\n        legendMin = legend.valueAxis.axisRanges.create();\n        legendMax = legend.valueAxis.axisRanges.create();\n\n        legend.valueAxis.renderer.labels.template.adapter.add(\"text\", function(labelText) {\n            return \"\";\n        });\n\n        var polygonTemplate = polygonSeries.mapPolygons.template;\n        polygonTemplate.tooltipText = \"{name}: {value}\";\n        polygonTemplate.nonScalingStroke = true;\n        polygonTemplate.strokeWidth = 0.5;\n\n        polygonTemplate.events.on(\"hit\", function(ev) {\n            // implement smooth page update here    \n        });\n\n        polygonSeries.events.on(\"dataitemsvalidated\", function(ev) {\n            if (currentCountry) {\n                chart.zoomToMapObject(polygonSeries.getPolygonById(currentCountry));\n            } else {\n                chart.goHome();\n            }\n        });\n    }\n\n    legend.marginRight = am4core.percent(4);\n    legend.minValue = 0;\n    legend.maxValue = formatNumber(maxValue);\n\n    legendMin.value = legend.minValue;\n    legendMin.label.text = legend.minValue;\n\n    legendMax.value = legend.maxValue;\n    legendMax.label.text = legend.maxValue;\n\n\n    if (markerSeries) {\n        chart.series.removeIndex(\n            chart.series.indexOf(markerSeries)\n        );\n        markerSeries = null;\n    }\n\n    if (!markers) {\n        polygonSeries.data = caseMapData;\n    } else {        \n        polygonSeries.data = [{id: zoomCountry, value: 0, madeFromGeoData: true}];\n\n        markerSeries = chart.series.push(new am4maps.MapImageSeries());\n        markerSeries.data = caseMapData;\n        markerSeries.dataFields.value = \"value\";\n\n        var imageTemplate = markerSeries.mapImages.template;\n        imageTemplate.nonScaling = true;\n        imageTemplate.propertyFields.latitude = \"latitude\";\n        imageTemplate.propertyFields.longitude = \"longitude\";\n\n        var circle = imageTemplate.createChild(am4core.Circle);\n        circle.fillOpacity = 0.7;\n        circle.propertyFields.fill = \"color\";\n        circle.tooltipText = \"{id}: [bold]{value}[/]\";\n\n        circle.stroke = am4core.color(\"#363636\");\n\n        markerSeries.heatRules.push({\n            target: circle,\n            property: \"fill\", \n            min: am4core.color(\"white\").brighten(1),\n            max: am4core.color(dashboardColors.activeCases).brighten(0)\n          });\n\n          markerSeries.heatRules.push({\n            target: circle,\n            property: \"radius\",\n            min: 4,\n            max: 30,\n            dataField: \"value\",\n        });\n    }\n\n    currentCountry = zoomCountry ? zoomCountry : null;\n};\n","import {dashboardColors} from \"./Util\";\nimport {renderMap} from './CaseHeatMap';\nimport {renderStatus, renderSummary, renderMortalityRates} from \"./DataCharts\";\n\nexport let computeState = (home) => {\n\n    var case_map = [];\n    var case_summary = [];\n    var mortality_rates = [];\n\n    let country_list = [];\n\n    let process = (entries) => {\n        let last = entries[home.dateIndex];\n        if (last) {\n            let current = last.cases - (last.recoveries + last.deaths);\n            return { \n                current: current,\n                total: last.cases, \n                deaths: last.deaths, \n                recoveries: last.recoveries, \n                mortality: last.deaths/last.cases\n            };\n        } else {\n            return 0;\n        }\n    };\n\n    let global_totals = [];\n    \n    let process_geo = (geo) => {\n        geo.entries.forEach((entry,i) => {\n            if (i < home.dateIndex) {\n                if (i === global_totals.length) {\n                    global_totals.push({\n                        date: new Date(entry.date).toDateString(), \n                        active: entry.cases-(entry.deaths+entry.recoveries), \n                        cases: entry.cases, \n                        deaths: entry.deaths, \n                        recoveries: entry.recoveries});\n                } else {\n                    global_totals[i].cases += entry.cases;\n                    global_totals[i].active += entry.cases-(entry.deaths+entry.recoveries);\n                    global_totals[i].deaths += entry.deaths;\n                    global_totals[i].recoveries += entry.recoveries;\n                }\n            }\n        });\n    };\n\n    var c_index = 1;\n    var markers = false;\n    for (let [name, country] of Object.entries(home.caseData.geoData)) {\n        country_list.push({ id: c_index++, value: name });\n        let filter_match = (home.countryFilter == null || country.name === home.countryFilter);\n        \n        if (country.entries && filter_match) {\n            if (home.dateIndex === -1) {\n                home.dateIndex = country.entries.length-1;\n            }\n            process_geo(country);\n        }\n\n        if (country.children && filter_match) {\n\n            for (let child of Object.values(country.children)) {\n                if (child) {\n                    markers = home.countryFilter != null ? true : false;\n                    process_geo(child);\n                }\n            }\n        }\n    };\n\n    let main_body = (name, country, filter_match) => {\n        if (country.entries.length > 0 && filter_match) {\n            let r = process(country.entries);\n            \n            if (markers) {\n                if (r.current > 0) {\n                    case_map.push({id: name, latitude: country.lat, longitude: country.lon, value: r.current});\n               }\n            } else {\n                case_map.push({id: home.iso_names[name], value: r.current});\n            }\n\n            case_summary.push({category: name, value1: r.current, value2: r.deaths, value3: r.recoveries});\n            let mt = r.current + r.deaths + r.recoveries;\n            mortality_rates.push(\n                {\n                    title: name,\n                    x: (r.deaths/mt)*100, \n                    y: (r.recoveries/mt)*100,\n                    value: mt, \n                    rate: r.recoveries > r.current ? \"Declining\" : \"Increasing\",\n                    color: r.recoveries > r.current ? dashboardColors.recoveries : dashboardColors.deaths, \n                }\n            );\n        } else if (filter_match) { //rollup children\n            var total = 0;\n            var case_totals = {category: name, value1: 0, value2: 0, value3: 0};\n\n            for (let region of Object.values(country.children)) {\n                let r = process(region.entries);\n                total += r.current;\n                case_totals.value1 += r.current;\n                case_totals.value2 += r.deaths;\n                case_totals.value3 += r.recoveries; \n            }\n\n            let mt = case_totals.value1 + case_totals.value2 + case_totals.value3;\n            mortality_rates.push(\n                {\n                    title: name,\n                    x: (case_totals.value2/mt)*100, \n                    y: (case_totals.value3/mt)*100,\n                    value: mt,\n                    rate: case_totals.value3 > case_totals.value1 ? \"Declining\" : \"Increasing\",\n                    color: case_totals.value3 > case_totals.value1 ? dashboardColors.recoveries : dashboardColors.dea, \n                }\n            );\n\n            if (!home.iso_names[name]) {\n                console.log(name+\"--\"+home.iso_names[name]);\n            } else {\n                case_map.push({id: home.iso_names[name], value: total});\n            }\n            case_summary.push(case_totals);\n        }\n    };\n\n\n    for (let [name, country] of Object.entries(home.caseData.geoData)) {\n\n        let filter_match = (home.countryFilter == null || country.name === home.countryFilter);\n        if (home.countryFilter != null && filter_match && Object.values(country.children).length > 0) {\n            for (let [regionName, region] of Object.entries(country.children)) {\n                main_body(regionName, region, filter_match);\n            }\n        } else {\n            main_body(name, country, filter_match);\n        }\n    }\n    \n\n    case_summary = case_summary.sort((x,y) => {\n        if (x.value1 > y.value1) {\n            return -1;\n        } else if (x.value1 < y.value1) {\n            return 1;\n        } else {\n            return 0;\n        }\n    });\n    \n    mortality_rates = mortality_rates.sort((x,y) => {\n        if (x.value > y.value) {\n            return -1;\n        } else if (x.value < y.value) {\n            return 1;\n        } else {\n            return 0;\n        }\n    });\n\n    case_summary = case_summary.slice(0,25);\n    mortality_rates = mortality_rates.slice(0,25);\n    \n    let map_opts = home.state.mapOptions;\n    if (home.countryFilter != null) {\n        map_opts.displayMode = markers ? 'markers' : '';\n\n        let iso_name = home.iso_names[home.countryFilter] ? home.iso_names[home.countryFilter] : null;\n        map_opts.region = iso_name;\n    } else { \n        map_opts.displayMode = '';\n        map_opts.region = null;\n    }\n\n    country_list = country_list.sort((x,y) => {\n        if (x.value > y.value) {\n            return 1;\n        } else if (y.value > x.value) {\n            return -1;\n        } else { \n            return 0;\n        }\n    });\n\n    country_list.unshift({id: 0, value: \"Global\"});\n    renderMap(home, case_map, case_summary[0].value1, markers, home.iso_names[home.countryFilter]);\n    renderStatus(global_totals);\n    renderSummary(case_summary);\n    renderMortalityRates(mortality_rates);\n    home.globalTotals = global_totals;\n\n    return {\n        caseMap: case_map, \n        caseSummary: case_summary, \n        mortalityRates: mortality_rates, \n        countryList: country_list\n    };\n};","import React, {Component} from 'react';\nimport { Container, Row, Col, Form  } from \"react-bootstrap\";\nimport {Navbar, Nav} from \"react-bootstrap\";\nimport countries from './countries.json';\nimport {renderTimeline} from \"./helpers/DataCharts\";\nimport './Home.css';\nimport {computeState} from \"./helpers/ParseData\";\nclass Home extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            caseMap: [\n                ['Country', 'Confirmed Cases']\n            ], \n            caseSummary: [['Country', 'Current Cases', 'Deaths', 'Recovered Cases']], \n            mortalityRates: [['ID', 'Mortality', 'Recovery', 'Status', 'Confirmed Cases']], \n            globalTimeSeries: [['x', 'Active Cases', 'Deaths', 'Recoveries']],\n            countryFilter: null, \n            mapOptions: {\n                displayMode: \"\",\n                colorAxis: { colors: ['white', 'red'] }\n            },\n            countryList: [{index: 0, value: \"Loading ...\"}],\n        };\n        this.globalTotals = null;\n        this.dateIndex = -1;\n    }\n\n    componentDidMount() {\n        fetch('/covid.json', {\n            credentials: \"same-origin\"\n        }).then((res) => res.json()).then((data) => {\n            this.caseData = data;\n\n            this.iso_names = {};\n\n            countries.forEach((country) => {\n                this.iso_names[country.name] = country[\"alpha-2\"];\n            });\n            \n            this.setState(computeState(this));\n            renderTimeline(this, this.globalTotals);\n        });\n    }\n\n    onCountrySelect(e) {\n        this.countryFilter = this.countrySelect.value === \"Global\" ? null : this.countrySelect.value;\n        this.setState(computeState(this));\n        renderTimeline(this, this.globalTotals);\n    }\n\n    onDayChange(e) {\n        this.dateIndex = e.day;\n        this.setState(computeState(this));\n    }\n\n    render() {\n        return (\n            <div>\n            <Navbar variant=\"dark\" bg=\"dark\">\n            <Navbar.Brand href=\"#home\">COVID-19 Data Dasbboard</Navbar.Brand>\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav className=\"mr-auto\">\n\n                </Nav>\n                <Form inline>\n                    <Form.Control as=\"select\" onChange={this.onCountrySelect.bind(this)} ref={ el => this.countrySelect=el}>\n                        {\n                            this.state.countryList.map((option, index) => {\n                                return (<option key={index} value={option.value}>{option.value}</option>)\n                            })\n                        }\n                    </Form.Control>\n                </Form>\n                </Navbar.Collapse>\n            </Navbar>\n\n            <Container fluid>\n            <Row>\n                <Col sm={12}>\n                <div id=\"mapdiv\" style={{ width: \"100%\", height: \"600px\" }}></div>\n                </Col>\n            </Row>\n            <Row>\n                    <Col sm={8}>\n                        <div id=\"timelinediv\" style={{ width: \"100%\", height: \"400px\" }}></div>\n                    </Col>\n                    <Col sm={4}>\n                        <div id=\"statusdiv\" style={{ width: \"100%\", height: \"400px\" }}></div>\n                    </Col>\n                </Row>            \n            <Row>\n                <Col sm={6}>\n                    <div id=\"summarydiv\" style={{ width: \"100%\", height: \"400px\" }}></div>\n                </Col>\n                    <Col sm={6}>\n                        <div id=\"mortalitydiv\" style={{ width: \"100%\", height: \"400px\" }}></div>\n                    </Col>\n                </Row>\n            </Container>\n            </div>\n        );\n    }\n}\n\nexport default Home;\n","import React from 'react';\nimport {Route, Switch} from 'react-router-dom';\nimport './Root.css';\nimport Home from './Home';\n\nconst Root = () => (\n    <main>\n        <Switch>\n            <Route exact path='/' component={Home}/>\n        </Switch>\n    </main>\n);\n\nexport default Root\n","import React from 'react'\nimport Root from './Root'\n\nconst App = () => (\n    <div>\n        <Root/>\n    </div>\n)\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render((\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n), document.getElementById('root'))\n"],"sourceRoot":""}